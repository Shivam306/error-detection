<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <title>SPM MACHINE WINDOW</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f2f2f2;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin: 20px 0;
        }

        .form-container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .form-heading {
            font-size: 50px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #4CAF50;
            text-align: center;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: normal;
        }

        input[type="number"] {
            -moz-appearance: textfield;
        }

        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        input[type="number"], select {
            width: calc(100% - 12px);
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
        }

        button:hover {
            background-color: #45a049;
        }

        .inline-label-input {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .inline-label-input label {
            width: 60px;
            margin-bottom: 0;
        }

        .inline-label-input input {
            width: 200px;
        }

        .valid {
            border-color: green;
        }

        .invalid {
            border-color: red;
        }

        .red {
            background-color: red; /* Change the button color to red */
        }
    </style>
</head>
<body>
    <h1>SPM MACHINE WINDOW</h1>
    <div class="form-grid">
        {% for i in range(num_frames) %}
        <form id="form{{ i + 1 }}" method="POST" action="/submit" onsubmit="return handleSubmit(event, {{ i }});">
            <div class="form-container">
                <div class="form-heading">SPM {{ i + 1 }}</div>
                <label for="employee{{ i }}">Select Employee:</label>
                <select id="employee{{ i }}" name="employee{{ i }}">
                    <option value="Rahul">Rahul</option>
                    <option value="Rohit">Rohit</option>
                    <option value="Shiva">Shiva</option>
                </select>

                <label for="component{{ i }}">Select Component:</label>
                <select id="component{{ i }}" name="component{{ i }}">
                    <option value="CSC">CSC</option>
                    <option value="Flange">Flange</option>
                    <option value="Mini Cylinder">Mini Cylinder</option>
                </select>

                <label for="process{{ i }}">Select Process:</label>
                <select id="process{{ i }}" name="process{{ i }}" onchange="addFields({{ i }});">
                    <option value="">-- Select Process --</option>
                    <option value="Drilling">Drilling</option>
                    <option value="Facing">Facing</option>
                    <option value="Leak">Leak</option>
                    <option value="Packaging">Packaging</option>
                </select>

                <div id="additional-fields{{ i }}"></div>

                <button type="submit">Submit CNC {{ i + 1 }}</button>
            </div>
        </form>
        {% endfor %}
    </div>

    <button class="navigation-button" onclick="window.location.href='/second'">Go to CNC Machine Window</button>
    
    <script>


        // Function to move to the next input field on Enter key press
        function handleEnterKey(event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Prevent form submission
                const inputs = Array.from(event.target.form.elements);
                const currentIndex = inputs.indexOf(event.target);
                
                // Move to the next input field if there is one
                const nextInput = inputs[currentIndex + 1];
                if (nextInput) {
                    nextInput.focus();
                }
            }
        }

        // Function to change input field color based on OK/NOK selection
        function updateInputColor(inputElement) {
            if (inputElement.value === "true") { // OK
                inputElement.classList.remove('invalid');
                inputElement.classList.add('valid');
            } else if (inputElement.value === "false") { // NOK
                inputElement.classList.remove('valid');
                inputElement.classList.add('invalid');
            } else {
                inputElement.classList.remove('valid', 'invalid'); // Reset on N/A or empty
            }
        }

        // Function to validate numeric input
        function validateNumericInput(inputElement, min, max) {
            const value = parseFloat(inputElement.value);
            if (isNaN(value)) {
                inputElement.classList.remove('valid', 'invalid'); // Reset if not a number
            } else if (value < min || value > max) {
                inputElement.classList.remove('valid');
                inputElement.classList.add('invalid'); // Out of range
            } else {
                inputElement.classList.remove('invalid');
                inputElement.classList.add('valid'); // In range
            }
        }

        // Add fields based on process selection
        window.addFields = function(formIndex) {
            const additionalFieldsDiv = document.getElementById('additional-fields' + formIndex);
            additionalFieldsDiv.innerHTML = ''; 

            const processSelect = document.getElementById('process' + formIndex);
            const selectedProcess = processSelect.value;

            if (selectedProcess === 'Drilling') {
                additionalFieldsDiv.innerHTML = `
                    <label for="diameter${formIndex}">Diameter (5.25-5.55):</label>
                    <input type="number" id="diameter${formIndex}" name="diameter${formIndex}" min="5.25" max="5.55" step="0.01" placeholder="Enter Diameter" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 5.25, 5.55)">

                    <label for="cd${formIndex}">C.D (37.21-37.41):</label>
                    <input type="number" id="cd${formIndex}" name="cd${formIndex}" min="37.21" max="37.41" step="0.01" placeholder="Enter C.D" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 37.21, 37.41)">
                `;
            } else if (selectedProcess === 'Facing') {
                additionalFieldsDiv.innerHTML = `
                    <label for="height${formIndex}">Height (10.05-10.15):</label>
                    <input type="number" id="height${formIndex}" name="height${formIndex}" min="10.05" max="10.15" step="0.01" placeholder="Enter Height" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 10.05, 10.15)">
                    <label for="visualinspection${formIndex}">Visual Inspection (No Burrs):</label>
                    <select id="visualinspection${formIndex}" name="visualinspection${formIndex}" onchange="updateInputColor(this); handleEnterKey(event)">
                        <option value="">N/A</option>
                        <option value="true">OK</option>
                        <option value="false">NOK</option>
                    </select>


                    <label for="width${formIndex}">Width (22.5-22.6):</label>
                    <input type="number" id="width${formIndex}" name="width${formIndex}" min="22.5" max="22.6" step="0.01" placeholder="Enter Width" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 22.5, 22.6)">
                `;
            } else if (selectedProcess === 'Leak') {
                additionalFieldsDiv.innerHTML = `
                    <label for="leakage${formIndex}">Leakage (0.01-0.05):</label>
                    <input type="number" id="leakage${formIndex}" name="leakage${formIndex}" min="0.01" max="0.05" step="0.01" placeholder="Enter Leakage" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 0.01, 0.05)">
                `;
            } else if (selectedProcess === 'Packaging') {
                additionalFieldsDiv.innerHTML = `
                    <label for="packagingWeight${formIndex}">Packaging Weight (0.5-1.0):</label>
                    <input type="number" id="packagingWeight${formIndex}" name="packagingWeight${formIndex}" min="0.5" max="1.0" step="0.01" placeholder="Enter Weight" onkeydown="handleEnterKey(event)" onblur="validateNumericInput(this, 0.5, 1.0)">
                `;
            }
};
    </script>
</body>
</html>
